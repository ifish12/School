{\rtf1\ansi\ansicpg1252\cocoartf1187\cocoasubrtf340
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural

\f0\fs24 \cf0 [2012-11-20 10:49:28 PM] Geoff Shapiro: Hey, iH8sn0w\
[2012-11-20 10:49:43 PM] iH8sn0w: Hi\
[2012-11-20 10:49:50 PM] Geoff Shapiro: May I call you Steven?\
[2012-11-20 10:49:56 PM] iH8sn0w: Sure\
[2012-11-20 10:49:59 PM] Geoff Shapiro: Awesome.\
[2012-11-20 10:50:09 PM] Geoff Shapiro: So, Steven, how long have you been in the iOS scene?\
[2012-11-20 10:50:20 PM] iH8sn0w: Since September 2009.\
[2012-11-20 10:50:45 PM] Geoff Shapiro: Oh, cool. So, what brought you into the scene? And what was the first notable thing you were a part of?\
[2012-11-20 10:51:46 PM] iH8sn0w: Just a very boredom summer. The frist notable thing that I was a part of would have to be the AT+XEMN vulnerability. It was used in geohot's blacksn0w unlock in the 3.1.2 days on the 05.11.07 ICE2 baseband.\
[2012-11-20 10:52:58 PM] Geoff Shapiro: Whoa, I actually remember using blacksn0w way back then. So, you were just looking out of boredom? How'd the scene take you seriously? What'd you do to prove yourself?\
[2012-11-20 10:55:58 PM] iH8sn0w: It started with boredom, then branched out to a more explorative position. When I initially found the AT+XEMN vulnerability, I was extremely excited that I tweeted out that I had found something useful. Nobody took me seriously. I was eventually getting called out by a member of the iPhone Dev-Team who claimed I was a fraud. After seeing such harsh treatment, I publicly tweeted the vulnerability. This made everyone go silent and take me seriously.\
[2012-11-20 10:56:56 PM] Geoff Shapiro: Was that person by any chance a guy named Eric?\
[2012-11-20 10:57:18 PM] iH8sn0w: Yes. His alias online was MuscleNerd.\
[2012-11-20 10:58:20 PM] Geoff Shapiro: Ahaha, I'm not surprised at all. Anyway, that's pretty cool\
[2012-11-20 10:59:07 PM] Geoff Shapiro: So, I'm sort of curious how the iOS boot chain / sequence works, I know you've told me about it before, but do you care to go in-dept for me?\
[2012-11-20 10:59:08 PM] iH8sn0w: If you want some references btw... \
\
https://twitter.com/iH8sn0w/status/4353547726\
http://twitter.com/iphone_dev/status/4947333571\
https://twitter.com/iH8sn0w/status/4954333558\
\
(note the date & time)\
[2012-11-20 10:59:46 PM] iH8sn0w: The iOS boot chain in a way is simple, but at another level complex.\
[2012-11-20 11:00:00 PM] Geoff Shapiro: Do tell me more\
[2012-11-20 11:26:31 PM] iH8sn0w: Upon the device gaining power, SecureROM (a factory image of a bootloader flashed right at the assembly line) gets loaded. The first check SecureROM performs is to see if the 'home' button is being pressed or not. If it is being pressed, it enters DFU (Device Firmware Upgrade) mode. This mode essentially allows iTunes or Apple's own diagnostic tools to upload bootloaders shipped within IPSWs (iBSS). The main intention for this mode is to ensure that the device is not brickable at a software level. If the home button is not being pressed, SecureROM proceeds to load LLB (Low Level Boot) [which is another bootloader always flashed upon restore] from nor0/nand0 to the stack. SecureROM first performs an RSA signature check on LLB. The RSA signature is 80 bytes long and is flashed to the footer of every image flashed during a restore. It is based on the processor's serial number (A.K.A ECID) to ensure the RSA signature of the bootloader will only work for that specific device. Apple does this to ensure you don't pass off your signature to another device as an attempt to downgrade. If the check fails, SecureROM forces itself into DFU. If not, SecureROM checks the header of the image to locate the KBAG (Key Bag) to pass on to the AES GID engine. The KBAG is always random for every version and is used as a way of preventing modification/viewing of the image contents. After the KBAG of LLB if passed through the AES GID engine, the image is still compressed with lzss compression. So SecureROM proceeds to decompress the decrypted image in memory. Finally, SecureROM jumps into the LLB image and LLB takes over the boot. LLB acts extremely similiar to SecureROM, the only difference is that it is flashed upon every restore (making it possible to close bugs/exploits with a firmware update). LLB does what SecureROM does but instead of loading LLB, it loads iBoot (the actual bootloader). Performing the same steps, SHSH verification, KBAG decryption, lzss decompression, jump. Once iBoot initializes so does the framebuffer (display). iBoot then loads the Apple Logo image from nand0/nor0. Hilariously, it too has the same security that LLB & iBoot have. It too is encrypted with a RSA signature, AES 256 KBAG and lzss compression. After the Apple Logo passes everything, it is displayed at the framebuffer address which is different for every device (easily retreivable from the nvram). iBoot then mounts the root filesystem partition to /boot. iBoot proceeds to load the kernel from the root filesystem (in /System/Library/Caches/com.apple.kernelcaches/kernelcache) to the loadaddr (again retreivable from nvram). iBoot checks the same stuff (yet again)... RSA, AES 256 KBAG, and lzss compression. Once all that is passed its kept in memory at 0x43000000. iBoot finally loads one final firmware image from nor0/nand0, that being Device Tree. The Device Tree just acts as a list of variable values for the kernel to retain in memory. Although it is literally a plain text file, it is still AES 256 encrypted along with lzss compression and again AES 256 encryption. Once Device Tree is validated, its kept in memory at 0x42000000. Finally, iBoot flicks a switch that disallows AES GID encryption from this point on (until power loss/reboot occurs mainly because they don't want anyone decrypting their firmware aes keys in userland since its extremely easy to get unsigned code running at a userland level. AES UID (unique per device) is still available in iOS though but it is not used for firmware image encryption. Its used for encrypting the keychain and such [Passcode, email passwords, etc]) and decides to boot the kernel. At this point the kernel takes over and starts loading the kexts (drivers). This pertains to the HFS+ volume driver, GPU driver, all essential libraries in memory from the dyld cache located at /System/Library/Caches/com.apple.dyld/dyld_shared_cache_armv7 are mapped to 0x30000000 and /sbin/launchd takes over. launchd at this point pretty much just initalizes basic userland security enforcement variables and SpringBoard. Once SpringBoard is initialized, the user sees iOS.\
[2012-11-20 11:27:18 PM] iH8sn0w: It is worth noting that the kernel starts booting within 0.5 seconds. So it took me about a few hundred reboots just to type it.\
[2012-11-20 11:27:48 PM] Geoff Shapiro: Oh gosh... That's a REALLY complicated yet also kinda awesome that you know all this off the top of your head(it's a sign you need to get a life, Sn0w)\
[2012-11-20 11:28:10 PM] iH8sn0w: hah\
[2012-11-20 11:29:08 PM] Geoff Shapiro: So, how does Apple handle making it so you can't flash an older firmware to the device? For example, on an iPhone 4, you can't easily(without any changes) drop back down to iOS 5 from iOS 6\
[2012-11-20 11:46:03 PM] iH8sn0w: This starts dating back to the launch of the iPhone 3GS. Apple started to enforce unique RSA signatures based on the device's processor serial number (ECID). Upon initalizing a restore with Apple, iTunes phones home to Apple's TSS (Tatsu Signing Server) and asks them for SHSH blobs unique to your device's ECID and for the firmware you're attempting to restore to. At this point, Apple decides whether or not to permit your restore. If the firmware you requested to restore to is the latest firmware that they are actively signing, their server will generate a set of SHSH blobs for all of the firmware images in the IPSW using their private signing keys and attach a public key certificate in the footer of each signature. If Apple is not signing the requested firmware, they will send a response stating that the device is not eligiable for restore with the requested build (Error 3194). Jay Freeman (saurik) got involved and began caching SHSH blobs for the latest firmware of every 3GS user running Cydia (mainly because you can simply perform a replay attack by redirecting the DNS of Apple's TSS server to saurik's). Although this was not a fully practical solution, because every set of SHSH blobs were unique to the device, you cannot share them with others expecting the device to happily accept it. This was the way Apple prevented iOS downgrades until iOS 5.x.x. Once iOS 5 hit, they pushed out their new protocol (APTicket). Rather than have everything based on a device's ECID, they decided to randomly generate a 72 byte hexadecimal string called a NONCE. When a restore would commence, the bootloader will generate a NONCE and pass it along to iTunes. iTunes will then submit a request to Apple's TSS server for a set of SHSH Blobs & an APTicket while passing it not only the ECID but the NONCE too making the response being sent down unique to only THAT restore. This defeated the replay attack that was implemented between iOS 3.x.x to iOS 4.3.x. Downgrading at this point was now only possible on devices with a DFU bootrom exploit (3GS/A4 devices) and by embedding the SHSH blobs and APTIcket into a PRE-SIGNED firmware. For devices containing the A5 processor and above, it is not possible to downgrade. There is a loophole that exists for any device running BELOW OR EQUAL TO iOS 5.1.1 though that permits them to downgrade or essentially "re-restore". As far as iOS 6 goes at the moment, downgrading any A5 device and up it is currently not possible.\
[2012-11-20 11:47:50 PM] Geoff Shapiro: That's kinda amazing\
[2012-11-20 11:48:09 PM] Geoff Shapiro: It's really cool how in-depth you're going with me. Most people wouldn't do this\
[2012-11-20 11:48:32 PM] iH8sn0w: Its good practice for me :P\
[2012-11-20 11:49:00 PM] Geoff Shapiro: Didn't you do an entire talk about the APTicket at Jailbreak Con?\
[2012-11-20 11:49:06 PM] iH8sn0w: yeup.\
[2012-11-20 11:51:47 PM] Geoff Shapiro: I heard it was a hit\
[2012-11-20 11:52:06 PM] Geoff Shapiro: Anyway, thanks for taking time to chat with me, Steven. It was very insightful!\
[2012-11-20 11:52:53 PM] iH8sn0w: No problem! :)}